<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DPsim â€“ Getting Started</title>
    <link>https://dpsim.fein-aachen.org/docs/getting-started/</link>
    <description>Recent content in Getting Started on DPsim</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://dpsim.fein-aachen.org/docs/getting-started/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Build</title>
      <link>https://dpsim.fein-aachen.org/docs/getting-started/build/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dpsim.fein-aachen.org/docs/getting-started/build/</guid>
      <description>
        
        
        &lt;h2 id=&#34;docker-based&#34;&gt;Docker based&lt;/h2&gt;
&lt;p&gt;Clone the repository&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone --recurse-submodules git@git.rwth-aachen.de:acs/public/simulation/dpsim/dpsim.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or using https if you do not have an account&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone --recurse-submodules https://git.rwth-aachen.de:acs/public/simulation/dpsim/dpsim
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the repository, there is a Docker file with all required dependencies&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd dpsim
$ docker build -t rwthacs/dpsim-dev -f Packaging/Docker/Dockerfile.dev .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, the image can be pulled from DockerHub like so&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker pull rwthacs/dpsim-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For OS specific instructions on how to install requirements, see the sections below.&lt;/p&gt;
&lt;p&gt;Next, run a Docker container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd dpsim
$ docker run -it -p 8888:8888 -v $(pwd):/dpsim --privileged rwthacs/dpsim-dev bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The option &lt;code&gt;-p&lt;/code&gt; maps the port 8888 of the container to the docker host. This is required to access the jupyter lab instance inside the container. The option &lt;code&gt;--privileged&lt;/code&gt; is required for debug builds.&lt;/p&gt;
&lt;p&gt;For Windows, you might need to specify the current directory with curly brackets&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run -it -p 8888:8888 -v ${pwd}:/dpsim --privileged rwthacs/dpsim-dev bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, you should be in an interactive session inside the docker container.&lt;/p&gt;
&lt;p&gt;The DPsim C++ and Python library without C++ examples or documentation can be built as follows&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd /dpsim
$ mkdir build &amp;amp;&amp;amp; cd build
$ cmake ..
$ cmake --build . --target dpsim_python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To build everything run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cmake --build .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you would like to use the Python package, it has to be added to the path&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd /dpsim/build
$ export PYTHONPATH=$(pwd)/Source/Python:$(pwd)/../Source/Python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To run jupyter lab&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd /dpsim
$ jupyter lab --ip=&amp;quot;0.0.0.0&amp;quot; --allow-root --no-browser
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To install dpsim run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd /dpsim/build
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cmake-for-linux&#34;&gt;CMake for Linux&lt;/h2&gt;
&lt;p&gt;The most recent list of requirements can be found in the Dockerfiles.&lt;/p&gt;
&lt;p&gt;Make sure that the required dependencies are installed.
The &lt;a href=&#34;https://git.rwth-aachen.de/acs/public/simulation/dpsim/dpsim/-/blob/master/Packaging/install-fedora-deps.sh&#34;&gt;fedora installation script&lt;/a&gt; in the DPsim repository is a good place to start from.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There are currently no Debian packages for &lt;code&gt;villas-node&lt;/code&gt; and &lt;code&gt;libcimpp16v29a&lt;/code&gt;.
If you want to use these optional feature, you have to build them manually.&lt;/p&gt;
&lt;p&gt;Install Sundials&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone --branch v3.1.1 https://github.com/LLNL/sundials.git
$ mkdir sundials/build
$ pushd sundials/build
$ cmake .. \
    -DBUILD_SHARED_LIBS=ON \
    -DBUILD_STATIC_LIBS=OFF \
    -DEXAMPLES_ENABLE_C=OFF
$ make -j$(nproc) install
$ popd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following steps to clone, build and install are the same as for the Docker setup.&lt;/p&gt;
&lt;h2 id=&#34;cmake-for-windows&#34;&gt;CMake for Windows&lt;/h2&gt;
&lt;p&gt;Make sure that the required dependecies are installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2017 with C++ Desktop development package&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; for Windows&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Git for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For Python support, install Python3, for example, Anaconda, and add Python to your PATH.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clone the project as explained for Docker.&lt;/p&gt;
&lt;p&gt;Open a windows command prompt and navigate into the new DPsim folder.
Generate a Visual Studio project with CMake and use it to build the project&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir build
$ cd build
$ cmake -G &amp;quot;Visual Studio 15 2017 Win64&amp;quot; ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open Visual Studio and load the Visual Studio project from the build directory within the DPsim folder.&lt;/p&gt;
&lt;p&gt;You can either build the project from within Visual Studio or from the command line by running the following command in the windows command prompt&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cmake --build .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To install the Python package use Visual Studio and the Release configuration to build the DPsim Python module and then build the INSTALL project.&lt;/p&gt;
&lt;h2 id=&#34;cmake-for-macos&#34;&gt;CMake for macOS&lt;/h2&gt;
&lt;p&gt;Make sure that the required dependecies are installed&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
$ brew install gcc9 git cmake graphviz python3 gsl eigen spdlog
$ sudo pip3 install numpy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Clone the source as explained for the Docker setup.&lt;/p&gt;
&lt;p&gt;Compile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir build
$ cmake ..
$ make -j$(sysctl -n hw.ncpu)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To install the generated Python module to your system&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;python-package-for-pypi&#34;&gt;Python Package for pypi&lt;/h2&gt;
&lt;p&gt;Follow the previous steps to set up the Docker container.&lt;/p&gt;
&lt;p&gt;To build the Python package run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python3 setup.py bdist_wheel
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;
&lt;p&gt;Install &lt;a href=&#34;https://www.sphinx-doc.org/en/master/&#34;&gt;Sphinx&lt;/a&gt; or use the Docker image.&lt;/p&gt;
&lt;p&gt;Generate the Python documentation by running Sphinx via CMake:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir -p build &amp;amp;&amp;amp; cd build
$ cmake ..
$ make docs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resulting documentation will be generated in &lt;code&gt;Documentation/html/&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;c&#34;&gt;C++&lt;/h3&gt;
&lt;p&gt;Install &lt;a href=&#34;http://www.doxygen.nl/&#34;&gt;Doxygen&lt;/a&gt; or use the Docker image.&lt;/p&gt;
&lt;p&gt;Generate the C++ documentation by running Doxygen via CMake:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir -p build &amp;amp;&amp;amp; cd build
$ cmake ..
$ make docs_cxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resulting documentation will be generated in &lt;code&gt;Documentation/html/Cxx&lt;/code&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Development</title>
      <link>https://dpsim.fein-aachen.org/docs/getting-started/development/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dpsim.fein-aachen.org/docs/getting-started/development/</guid>
      <description>
        
        
        &lt;h2 id=&#34;environment&#34;&gt;Environment&lt;/h2&gt;
&lt;p&gt;We recommend the following development tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Editor: &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Extensions:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools&#34;&gt;C/C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-python.python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vector-of-bool.cmake-tools&#34;&gt;CMake Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig&#34;&gt;EditorConfig for VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack&#34;&gt;Remote Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cmake.org&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com&#34;&gt;Git&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Issues: &lt;a href=&#34;http://git.rwth-aachen.de/acs/public/simulation/dpsim/dpsim/issues&#34;&gt;http://git.rwth-aachen.de/acs/public/simulation/dpsim/dpsim/issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Merge Requests: &lt;a href=&#34;http://git.rwth-aachen.de/acs/public/simulation/dpsim/dpsim/merge_requests&#34;&gt;http://git.rwth-aachen.de/acs/public/simulation/dpsim/dpsim/merge_requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Continous Integration and Testing: &lt;a href=&#34;http://git.rwth-aachen.de/acs/public/simulation/dpsim/dpsim/pipelines&#34;&gt;http://git.rwth-aachen.de/acs/public/simulation/dpsim/dpsim/pipelines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please follow the build instructions to checkout your code and install the basic dependencies and tools.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Install</title>
      <link>https://dpsim.fein-aachen.org/docs/getting-started/install/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dpsim.fein-aachen.org/docs/getting-started/install/</guid>
      <description>
        
        
        &lt;p&gt;DPsim is a Python module / C++ library for complex power system
simulation. As a Python module, the easiest way to get to know DPsim is
via &lt;a href=&#34;https://jupyter-notebook-beginner-guide.readthedocs.io/en/latest/&#34;&gt;Jupyter Notebooks&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;
&lt;p&gt;First, you need to install &lt;a href=&#34;https://docs.docker.com/install/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To start a Jupyter session, run a DPsim Docker container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ docker run -p 8888:8888 rwthacs/dpsim
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And access the session by opening the following link: http://localhost:8888/lab?token=3adaa57df44cea75e60c0169e1b2a98ae8f7de130481b5bc&lt;/p&gt;
&lt;h2 id=&#34;python&#34;&gt;Python&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Currently, the pypi packages are not maintained. Until we have updated the packages, please use the docker installation.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;First, you need to make sure that Python is installed and your version is compatible.
An easy way to install Python and all required packages is the &lt;a href=&#34;https://www.anaconda.com/&#34;&gt;Anaconda distribution&lt;/a&gt;.
To get started, install the latest installer for Python 3.x from the &lt;a href=&#34;https://www.anaconda.com/download/&#34;&gt;downloads section&lt;/a&gt;.
Then, run the Anaconda Prompt and create a new conda environment:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda create -n dpsim python=3.6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After creating the environment you need to make sure that it is activated.
The current environment is displayed at the beginning of the command line in brackets.
It should read &lt;em&gt;&amp;quot;(dpsim)&amp;hellip;&amp;quot;&lt;/em&gt;.
In case it is not activated, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ activate dpsim
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;pip-package-installation&#34;&gt;Pip Package Installation&lt;/h3&gt;
&lt;p&gt;Then, DPsim can be installed as a Python module:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install dpsim
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;from-source&#34;&gt;From Source&lt;/h2&gt;
&lt;p&gt;To build and install DPsim from the source files, please refer to the build section.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Real-Time</title>
      <link>https://dpsim.fein-aachen.org/docs/getting-started/real-time/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dpsim.fein-aachen.org/docs/getting-started/real-time/</guid>
      <description>
        
        
        &lt;p&gt;This page describes recommended techniques to optimize the host operating system for real-time execution of DPsim.&lt;/p&gt;
&lt;p&gt;In principle, real-time execution is supported on all platforms.
However, we recommend to use an optimized Linux installation.&lt;/p&gt;
&lt;h2 id=&#34;operating-system-and-kernel&#34;&gt;Operating System and Kernel&lt;/h2&gt;
&lt;p&gt;For minimum latency several kernel and driver settings can be optimized.&lt;/p&gt;
&lt;p&gt;To get started, we recommend the &lt;a href=&#34;https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_MRG/2/html/Realtime_Tuning_Guide/index.html&#34;&gt;Redhat Real-time Tuning Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&#34;https://rt.wiki.kernel.org/index.php/Main_Page&#34;&gt;PREEMPT_RT patched Linux&lt;/a&gt; kernel is recommended.
Precompiled kernels for Fedora can be found here: &lt;a href=&#34;http://ccrma.stanford.edu/planetccrma/software/&#34;&gt;http://ccrma.stanford.edu/planetccrma/software/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use the &lt;em&gt;tuned&lt;/em&gt; tool for improving general real-time performance.
Please adjust the setting &lt;code&gt;isolated_cpucores&lt;/code&gt; according to your hardware and enable the &lt;code&gt;realtime&lt;/code&gt; profile as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  $ dnf install tuned-profiles-realtime
  $ echo &amp;quot;realtime&amp;quot; &amp;gt; /etc/tuned/active_profile
  $ echo &amp;quot;isolated_cpucores=6-7&amp;quot; &amp;gt;&amp;gt; /etc/tuned/realtime-variables.conf
  $ systemctl enable tuned &amp;amp;&amp;amp; systemctl start tuned
  $ systemctl reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;running-a-real-time-simulation&#34;&gt;Running a real-time simulation&lt;/h2&gt;
&lt;p&gt;As a reference, real-time simulation examples are provided in the Examples/Cxx folder of the DPsim repository.&lt;/p&gt;
&lt;p&gt;In order to run a real-time simulation, the simulation process must be started in a special way in order to change the execution priority, scheduler and CPU affinity.
For this purpose the &lt;code&gt;chrt&lt;/code&gt; and &lt;code&gt;taskset&lt;/code&gt; commands are used.
In the following example, we pin the execution of the simulation to CPU cores 6-7 which have been reserved previously by the tuned real-time profile (see above).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  $ taskset --all-tasks --cpu-list 6-7 \
  $ chrt --fifo 99 \
  $ Examples/Cxx/RT_DP_CS_R_1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://man7.org/linux/man-pages/man1/chrt.1.html&#34;&gt;chrt man-page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://man7.org/linux/man-pages/man1/taskset.1.html&#34;&gt;taskset man-page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;recommended-hardware&#34;&gt;Recommended Hardware&lt;/h2&gt;
&lt;p&gt;Some proposals for the selection of appropriate server hardware:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server-grade CPU, e.g. Intel Xeon. A multi-core system enables true parallel execution of several decoupled systems&lt;/li&gt;
&lt;li&gt;Server-grade network cards, e.g. Intel PRO/1000. These allow offloading of UDP checksumming to the hardware&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
